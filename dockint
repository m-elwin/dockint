#!/bin/sh
set -e

usage=\
"Usage: dockint init [directory]
    or: dockint from <base_image>
    or: dockint activate [directory]
    or: dockint root [directory]

    Work interactively with a docker container as if it's environment were on the host system.
    You work as your current user, all devices are available, and ports running in the container are shared with the host.
    The dockint environment is mounted as your home directory inside the container

    1. init [directory] : turn the specified directory (defaults to current directory) into a dockint environment
    2. from <base_image> : build the docker container in the current directory, deriving it from the specified base image
       - This will initialize a =.dockint= environment in the current directory if it has not yet been initialized
    3. activate [directory] : Start working inside the docker container connected with the current dockint environment
       - The docker container is never cleaned up by this script so changes will persist in the container
       - Subsequent calls to activate for the same dockint environment will run in the same container
       - The user will have no password set, you can set a password with passwd inside the container
    4. root [directory] : enter the docker container as root
       - This technically gives you root access to the system, since you have access to dev (but to really mess anything up you have to explicitly mount the host filesystem)
       - Anyone on your computer who can access docker essentially has root access anyway
       - Useful for setting up packages or installing sudo
    5. reset [directory] : reset the docker cotnainer in the dockint environment
       - By default all changes you make to a dockint environment happen in a single container, which persists (including across reboots)
       - Reset will undo all these changes
"

# The base dockerfile
dockerfile=\
'ARG BASE
FROM $BASE

# Make Xwindows work with the native x server and qt
ENV DISPLAY=:0
ENV QT_X11_NO_MITSHM=1

# Get the user id from the host system
# These args are passed at build time
# and set up the docker container to have the same
# users as the host system
ARG UNAME
ARG UID
ARG GID
ARG PASS

COPY passwd /etc/passwd
COPY group /etc/group

RUN passwd -d $UNAME
# change to the desired user
USER $UNAME
WORKDIR /home/$UNAME'


# determine if we need to use sudo when calling docker
if groups $USER | grep -q docker;
then
    DOCKER=docker
else
    DOCKER="sudo docker"
fi


docker_activate() {
# $1 user name
# $2 path to docker directory (optional, defaults to pwd)
    if [ -z "$2" ];
    then
        homedir="$(pwd)"
        dockintdir="$homedir/.dockint"
    else
        homedir=$2
        dockintdir="$2/.dockint"
    fi

    if [ ! -d "$dockintdir" ];
    then
        echo "The specified directory ($dockintdir) does not exist"
        exit 1
    fi

    if [ ! -e "$dockintdir"/image_name ];
    then
        echo "Please run dockint from <image> to finish initializing the docker container"
        exit 1
    fi
    if [ ! -e "$dockintdir"/container_name ];
    then
        echo "Please run dockint from <image> to finish initializing the docker container"
        exit 1
    fi

    # If the container is not running
    container=$(cat $dockintdir/container_name)
    if [ -z $($DOCKER ps -q --filter "name=$container" --filter "status=running") ];
    then
        # if the container does not exist run it (which makes it exist and starts it
        if [ -z $($DOCKER ps -q --filter "name=$container") ];
        then
            # run docker, giving it access to the specified devices and X windows
            # the cap-add and security-opt lets me use gdb to debug ros nodes
            xhost +local:root
            $DOCKER run -itd  --name "$(cat $dockintdir/container_name)" \
                --hostname "$HOST" \
                -v $homedir:/home/$1 \
                -v /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 \
                -v /etc/machine-id:/etc/machine-id \
                -v /var/run/dbus:/var/run/dbus \
                --device /dev/dri \
                --cap-add=SYS_PTRACE \
                --security-opt seccomp=unconfined \
                --privileged \
                --network=host \
                -v /dev/:/dev \
                -v $XDG_RUNTIME_DIR:$XDG_RUNTIME_DIR \
                -e XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR \
                "$(cat $dockintdir/image_name)"

            if [ $? -ne 0 ]; then
                echo "Failed to run docker container $container."
                exit 1
            fi
         else
               #the container exists it just needs to be started
             $DOCKER start $container
             if [ $? -ne 0 ]; then
                 echo "Failed to start docker container $container."
                 exit 1
             fi
        fi

    fi
    # At this point the container is running, so execute bash
    $DOCKER exec -it -u $1 $container /bin/bash
    if [ $? -ne 0 ]; then
        echo "Failed to exec /bin/bash in docker container $container."
        exit 1
    fi
}


# Initialize the dockint environment by creating the .dockint directory
# This directory contains docker files and other items in the context
init_dockint_environment() {
    if [ -z "$2" ];
    then
        dockintdir="$(pwd)/.dockint"
    else
        dockintdir="$2/.dockint"
    fi
    mkdir -p "$dockintdir"
    printf "$dockerfile" > "$dockintdir/Dockerfile"
    cp /etc/group "$dockintdir"
    cp /etc/passwd "$dockintdir"
}

# build the docker image. It must be from an existing base image
docker_build_image() {
    if [ -z "$1" ];
    then
        echo "Must specify the base image name"
        exit 1
    fi
    base_image="$1"
    echo "Building base image $base_image"
    if [ ! -d ".dockint" ];
    then
        init_dockint_environment
    fi
    # replace / with underscore and remove leading underscore
    name=$(pwd | tr '/' '_' | cut -c 2-)
    image_tag=${name}_img
    container=${name}_container
    cd .dockint
    echo $image_tag > image_name
    echo $container > container_name
    $DOCKER build --build-arg UID=$(id -u) --build-arg GID=$(id -g) --build-arg UNAME=$USER --build-arg BASE=$base_image --tag "$image_tag" .
    if [ $? -ne 0 ]; then
        echo "Failed to create docker image $image"
        exit 1
    fi
}


docker_remove() {
    if [ -z "$1" ];
    then
        homedir="$(pwd)"
        dockintdir="$homedir/.dockint"
    else
        homedir=$1
        dockintdir="$1/.dockint"
    fi

    if [ ! -d "$dockintdir" ];
    then
        echo "The specified directory ($dockintdir) does not exist"
        exit 1
    fi

    if [ ! -e "$dockintdir"/image_name ];
    then
        echo "Please run dockint from <image> to finish initializing the docker container"
        exit 1
    fi
    if [ ! -e "$dockintdir"/container_name ];
    then
        echo "Please run dockint from <image> to finish initializing the docker container"
        exit 1
    fi

    container=$(cat $dockintdir/container_name)
    $DOCKER stop $container
    $DOCKER rm $container
}

case $1 in
    init)
        init_dockint_environment $2
        exit 0
        ;;
    from)
        docker_build_image $2
        exit 0
        ;;
    activate)
        docker_activate $USER $2
        exit 0
        ;;
    root)
        docker_activate root $2
        exit 0
        ;;
    reset)
        docker_remove $2
        exit 0
        ;;
    *)
        printf "$usage"
        exit 0
        ;;
esac
